generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  email               String      @unique
  name                String?
  image               String?
  emailVerified       Boolean     @default(false)
  
  // OAuth
  githubId            String?     @unique
  githubToken         String?     // Encrypted
  
  // OpenRouter settings
  openrouterApiKey    String?     // User's personal OpenRouter API key
  favoriteModels      String[]    @default([]) // Array of favorite model IDs (max 10)
  defaultModel        String?     // Default model to use in chat
  
  // Relations
  workspaces          Workspace[]
  sessions            Session[]
  accounts            Account[]
  presets             Preset[]
  domains             Domain[]
  agents              Agent[]
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  token        String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  expiresAt         DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([providerId, accountId])
  @@index([userId])
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

model Workspace {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  
  // Container metadata
  containerId     String?
  vscodePort      Int?
  agentPort       Int?
  status          WorkspaceStatus @default(STOPPED)
  
  // Configuration
  githubRepo      String?
  githubBranch    String?         @default("main")
  nixConfig       String?
  template        String?
  preset          String?         @default("default")
  
  // User relation
  userId          String          @db.ObjectId
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  messages        Message[]
  deployments     Deployment[]
  
  // Metadata
  lastAccessedAt  DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([lastAccessedAt])
}

enum WorkspaceStatus {
  STOPPED
  STARTING
  RUNNING
  STOPPING
  ERROR
}

model Preset {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  
  // VS Code settings (JSON string)
  settings        String   // JSON stringified settings.json
  
  // Extensions (array of extension IDs)
  extensions      String[] @default([])
  
  // User relation
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
}

model Message {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  workspaceId     String    @db.ObjectId
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  role            String    // "user" or "assistant"
  content         String    // JSON stringified message parts array
  
  createdAt       DateTime  @default(now())
  
  @@index([workspaceId])
  @@index([createdAt])
}

enum DeploymentStatus {
  STOPPED
  BUILDING
  DEPLOYING
  RUNNING
  STOPPING
  ERROR
}

model Build {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  deploymentId    String      @db.ObjectId
  deployment      Deployment  @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  
  status          BuildStatus @default(PENDING)
  logs            String?     // Build logs
  errorMessage    String?     // Error message if build failed
  
  // GitHub integration
  commitHash      String?
  commitMessage   String?
  branch          String?
  triggeredBy     String?     // "manual", "webhook", "auto"
  
  startedAt       DateTime?
  completedAt     DateTime?
  createdAt       DateTime    @default(now())
  
  @@index([deploymentId])
  @@index([status])
  @@index([createdAt])
}

enum BuildStatus {
  PENDING
  BUILDING
  SUCCESS
  FAILED
  CANCELLED
}

model Domain {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  domain          String      @unique
  verified        Boolean     @default(false)
  isDefault       Boolean     @default(false)
  
  // DNS verification
  verificationToken String?   @unique
  verifiedAt      DateTime?
  
  // SSL/TLS
  sslEnabled      Boolean     @default(false)
  
  // User relation
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relations
  deployments     Deployment[] @relation("DeploymentDomain")
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([userId])
  @@index([verified])
}

model Deployment {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String?
  
  // Container metadata
  containerId     String?
  port            Int?              // Application port inside container
  exposedPort     Int?              // Host port (if no base URL)
  status          DeploymentStatus  @default(STOPPED)
  
  // Build configuration
  buildCommand    String?           // e.g., "npm run build"
  startCommand    String            // e.g., "npm start"
  workingDir      String?           // Directory to run commands in
  envVars         String?           // JSON stringified environment variables
  
  // Network configuration
  subdomain       String?           // Subdomain for this deployment
  domainId        String?           @db.ObjectId
  domain          Domain?           @relation("DeploymentDomain", fields: [domainId], references: [id], onDelete: SetNull)
  customDomain    String?           // Full custom domain if not using subdomain
  
  // Auto-rebuild settings
  autoRebuild     Boolean           @default(false)
  webhookSecret   String?           // GitHub webhook secret
  
  // Workspace relation
  workspaceId     String            @db.ObjectId
  workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  
  // Relations
  builds          Build[]
  
  // Metadata
  lastDeployedAt  DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@index([workspaceId])
  @@index([status])
  @@index([subdomain])
  @@index([domainId])
}

enum AgentStatus {
  IDLE
  CLONING
  RUNNING
  COMPLETED
  ERROR
  PUSHING
}

model Agent {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  task            String        // The task description given to agent
  
  // GitHub repository info
  githubRepo      String        // Full repo name (e.g., "owner/repo")
  sourceBranch    String        @default("main")
  targetBranch    String        // Branch to push changes to
  
  // Container metadata
  containerId     String?
  agentPort       Int?
  status          AgentStatus   @default(IDLE)
  
  // Execution data
  toolCalls       String?       // JSON array of tool calls/messages
  filesEdited     String?       // JSON array of edited files with diffs
  errorMessage    String?
  
  // Queue for additional instructions while running
  instructionQueue String?      // JSON array of queued instructions
  
  // User relation
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Metadata
  startedAt       DateTime?
  completedAt     DateTime?
  pushedAt        DateTime?     // When changes were pushed to GitHub
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
}